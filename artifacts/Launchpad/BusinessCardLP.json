{
	"id": "188030c4-4503-f011-90c9-7c1e5237a7cf",
	"createdAt": "2025-03-17T15:37:50.583Z",
	"createdBy": "magnus.ertel@neptune-software.com",
	"extUserRoles": [],
	"extUserDepartments": [],
	"catOrder": [
		"c2d7fc50-4603-f011-90c9-7c1e5237a7cf"
	],
	"layout": [],
	"config": {
		"showAccessibilityFocusIndicator": true,
		"enhancement": [
			"==OBJECT STRING==",
			"sap.n.Enhancement.AfterUpdate = function () {",
			"            console.log('Trigger Enhancement AfterUpdate');",
			"            function extractDeeplinkValue(deeplinkString) {\r",
			"    try {\r",
			"        // Check if the string contains URL-encoded double quotes (%22)\r",
			"        if (deeplinkString && deeplinkString.includes('%22')) {\r",
			"            // Find the positions of the first and second %22\r",
			"            const firstQuotePos = deeplinkString.indexOf('%22');\r",
			"            const secondQuotePos = deeplinkString.indexOf('%22', firstQuotePos + 3);\r",
			"           // debugger\r",
			"            // Extract the value between the quotes if both quotes are found\r",
			"            if (firstQuotePos !== -1 && secondQuotePos !== -1) {\r",
			"                const value = deeplinkString.substring(firstQuotePos + 3, secondQuotePos);\r",
			"                console.log(\"EXTRACT!\");\r",
			"                return value;\r",
			"            }\r",
			"        }\r",
			"        \r",
			"        // Fallback to original behavior if no encoded quotes found\r",
			"        if (deeplinkString && deeplinkString.includes('=')) {\r",
			"            // Extract the part after the equals sign\r",
			"            const valueWithQuotes = deeplinkString.split('=')[1];\r",
			"            \r",
			"            // Remove any quotes around the value\r",
			"            const cleanValue = valueWithQuotes.replace(/[\"']/g, '');\r",
			"            console.log(\"EXTRACT FALLBACK!\");\r",
			"            return cleanValue;\r",
			"        }\r",
			"        return null;\r",
			"    } catch (error) {\r",
			"        console.error('Error extracting deeplink value:', error);\r",
			"        console.log(\"ERROR\");\r",
			"        return null;\r",
			"    }\r",
			"}\r",
			"\r",
			"\r",
			"\r",
			"var str = location.href;\r",
			"\r",
			"// https://gtmdemosystem.neptune-software.cloud/launchpad/domo_confirm_po_posting?appname=domo_confirm_po_posting&POSNR=1000#neptopmenu&2D415765-37B5-EE11-8925-0022489E23D1\r",
			"// https://gtmdemosystem.neptune-software.cloud/public/launchpad/magnus_test_deeplink#magnusdeeplinktest-display&id=%222F763265-E7E0-46C5-A390-BE6F71F52014%22\r",
			"\r",
			"// https://gtmdemosystem.neptune-software.cloud/public/launchpad/BusinessCardLP#businesscardapp&id=\"2F763265-E7E0-46C5-A390-BE6F71F52014\"\r",
			"// https://gtmdemosystem.neptune-software.cloud/public/launchpad/BusinessCardLP#businesscardapp&id=\"F70B698B-B90E-47C9-B520-7BEE7293D297\"\r",
			"\r",
			"\r",
			"console.log(\"STR: \",str)\r",
			"\r",
			"var res = str.split(\".neptune-software.cloud/public/launchpad/BusinessCardLP#\");\r",
			"\r",
			"\r",
			"//appname=domo_confirm_po_posting&POSNR=1000\r",
			"\r",
			"console.log(\"RES: \",res)\r",
			"\r",
			"\r",
			"\r",
			"//var full = res[1].split(\"#\");\r",
			"\r",
			"//appname=WEBSHOP_CEZAR?orderID=Google\r",
			"\r",
			"//console.log(\"FULL: \",full)\r",
			"\r",
			"var utmSplit = res[1].split(\"&\");\r",
			"\r",
			"\r",
			"//utmSplit[0] = appname=WEBSHOP_CEZAR\r",
			"\r",
			"//utmSplit[1] = orderID=Google\r",
			"\r",
			"console.log(\"UTMSPLIT: \",utmSplit)\r",
			"\r",
			"// debugger;\r",
			"\r",
			"var appnameArray = utmSplit[0];\r",
			"\r",
			"console.log(\"APPNAME\",appnameArray);\r",
			"// var ebeln = utmSplit[1].split(\"=\")[1];\r",
			"// var belnr = utmSplit[2].split(\"=\")[1];\r",
			"// var ztotal = utmSplit[3].split(\"=\")[1];\r",
			"\r",
			"// console.log(appnameArray)\r",
			"\r",
			"// console.log(orderIDArray)\r",
			"\r",
			"\r",
			"\r",
			"var idEntered = utmSplit[1].split(\"id=\")[1];\r",
			"//debugger;\r",
			"\r",
			"extractedValue = extractDeeplinkValue(idEntered);\r",
			"console.log(\"Extracted value \", extractedValue);\r",
			"\r",
			"userId = extractedValue;\r",
			"\r",
			"\r",
			"setTimeout(function () {\r",
			"\r",
			"    // Open the app\r",
			"\r",
			"    AppCache.Load(appnameArray, {\r",
			"    // AppCache.Load({\r",
			"\r",
			"        // startParams: {\r",
			"\r",
			"        //     // Pass in the data\r",
			"\r",
			"        //     // EBELN: ebeln,\r",
			"        //     // BELNR: belnr,\r",
			"        //     // ZTOTAL: ztotal,\r",
			"\r",
			"        // }\r",
			"\r",
			"    });\r",
			"\r",
			"}, 1000);\r",
			"\r",
			"\r",
			"\r",
			"",
			"        };sap.n.Enhancement.global = function () {",
			"            console.log('Trigger Enhancement global');",
			"            userId = \"123\";",
			"        };"
		],
		"hideTopHeader": true,
		"disableSplitview": true,
		"disableRedirectToHome": true,
		"enableTopMenu": true,
		"verticalMenu": false,
		"noSubmenuHover": false
	},
	"enhancement": [
		{
			"title": "After Update",
			"name": "AfterUpdate",
			"description": "Triggers after AppCache.Update is done",
			"param": "",
			"sort": 31,
			"group": "Common",
			"content": [
				"==OBJECT STRING==",
				"function extractDeeplinkValue(deeplinkString) {\r",
				"    try {\r",
				"        // Check if the string contains URL-encoded double quotes (%22)\r",
				"        if (deeplinkString && deeplinkString.includes('%22')) {\r",
				"            // Find the positions of the first and second %22\r",
				"            const firstQuotePos = deeplinkString.indexOf('%22');\r",
				"            const secondQuotePos = deeplinkString.indexOf('%22', firstQuotePos + 3);\r",
				"           // debugger\r",
				"            // Extract the value between the quotes if both quotes are found\r",
				"            if (firstQuotePos !== -1 && secondQuotePos !== -1) {\r",
				"                const value = deeplinkString.substring(firstQuotePos + 3, secondQuotePos);\r",
				"                console.log(\"EXTRACT!\");\r",
				"                return value;\r",
				"            }\r",
				"        }\r",
				"        \r",
				"        // Fallback to original behavior if no encoded quotes found\r",
				"        if (deeplinkString && deeplinkString.includes('=')) {\r",
				"            // Extract the part after the equals sign\r",
				"            const valueWithQuotes = deeplinkString.split('=')[1];\r",
				"            \r",
				"            // Remove any quotes around the value\r",
				"            const cleanValue = valueWithQuotes.replace(/[\"']/g, '');\r",
				"            console.log(\"EXTRACT FALLBACK!\");\r",
				"            return cleanValue;\r",
				"        }\r",
				"        return null;\r",
				"    } catch (error) {\r",
				"        console.error('Error extracting deeplink value:', error);\r",
				"        console.log(\"ERROR\");\r",
				"        return null;\r",
				"    }\r",
				"}\r",
				"\r",
				"\r",
				"\r",
				"var str = location.href;\r",
				"\r",
				"// https://gtmdemosystem.neptune-software.cloud/launchpad/domo_confirm_po_posting?appname=domo_confirm_po_posting&POSNR=1000#neptopmenu&2D415765-37B5-EE11-8925-0022489E23D1\r",
				"// https://gtmdemosystem.neptune-software.cloud/public/launchpad/magnus_test_deeplink#magnusdeeplinktest-display&id=%222F763265-E7E0-46C5-A390-BE6F71F52014%22\r",
				"\r",
				"// https://gtmdemosystem.neptune-software.cloud/public/launchpad/BusinessCardLP#businesscardapp&id=\"2F763265-E7E0-46C5-A390-BE6F71F52014\"\r",
				"// https://gtmdemosystem.neptune-software.cloud/public/launchpad/BusinessCardLP#businesscardapp&id=\"F70B698B-B90E-47C9-B520-7BEE7293D297\"\r",
				"\r",
				"\r",
				"console.log(\"STR: \",str)\r",
				"\r",
				"var res = str.split(\".neptune-software.cloud/public/launchpad/BusinessCardLP#\");\r",
				"\r",
				"\r",
				"//appname=domo_confirm_po_posting&POSNR=1000\r",
				"\r",
				"console.log(\"RES: \",res)\r",
				"\r",
				"\r",
				"\r",
				"//var full = res[1].split(\"#\");\r",
				"\r",
				"//appname=WEBSHOP_CEZAR?orderID=Google\r",
				"\r",
				"//console.log(\"FULL: \",full)\r",
				"\r",
				"var utmSplit = res[1].split(\"&\");\r",
				"\r",
				"\r",
				"//utmSplit[0] = appname=WEBSHOP_CEZAR\r",
				"\r",
				"//utmSplit[1] = orderID=Google\r",
				"\r",
				"console.log(\"UTMSPLIT: \",utmSplit)\r",
				"\r",
				"// debugger;\r",
				"\r",
				"var appnameArray = utmSplit[0];\r",
				"\r",
				"console.log(\"APPNAME\",appnameArray);\r",
				"// var ebeln = utmSplit[1].split(\"=\")[1];\r",
				"// var belnr = utmSplit[2].split(\"=\")[1];\r",
				"// var ztotal = utmSplit[3].split(\"=\")[1];\r",
				"\r",
				"// console.log(appnameArray)\r",
				"\r",
				"// console.log(orderIDArray)\r",
				"\r",
				"\r",
				"\r",
				"var idEntered = utmSplit[1].split(\"id=\")[1];\r",
				"//debugger;\r",
				"\r",
				"extractedValue = extractDeeplinkValue(idEntered);\r",
				"console.log(\"Extracted value \", extractedValue);\r",
				"\r",
				"userId = extractedValue;\r",
				"\r",
				"\r",
				"setTimeout(function () {\r",
				"\r",
				"    // Open the app\r",
				"\r",
				"    AppCache.Load(appnameArray, {\r",
				"    // AppCache.Load({\r",
				"\r",
				"        // startParams: {\r",
				"\r",
				"        //     // Pass in the data\r",
				"\r",
				"        //     // EBELN: ebeln,\r",
				"        //     // BELNR: belnr,\r",
				"        //     // ZTOTAL: ztotal,\r",
				"\r",
				"        // }\r",
				"\r",
				"    });\r",
				"\r",
				"}, 1000);\r",
				"\r",
				"\r",
				"\r",
				""
			],
			"active": true,
			"disabled": false
		},
		{
			"title": "Global Functions",
			"name": "global",
			"description": "Reuse global functions declared in this enhancement spot. Use the object sap.n.Enhancement.global for methods/data",
			"param": "",
			"sort": 10,
			"group": "Common",
			"content": "userId = \"123\";",
			"active": true,
			"disabled": false
		},
		{
			"title": "Before Update",
			"name": "BeforeUpdate",
			"description": "Triggers before AppCache.Update is started and tiles/tile groups is rendered for the first time. Supports Promise",
			"param": "",
			"sort": 30,
			"group": "Common",
			"content": "",
			"active": false,
			"disabled": false
		}
	],
	"name": "BusinessCardLP",
	"title": null,
	"description": null,
	"startApp": null,
	"launchpadFooter": null,
	"startWebApp": null,
	"customLogo": null,
	"launchpadApp": "",
	"hideSidemenu": false,
	"ui5Version": "1.120",
	"ui5Url": null,
	"ui5Theme": "sap_horizon",
	"header": "",
	"customTheme": null,
	"isExternal": false,
	"emailPattern": null,
	"loginApp": null,
	"enableNotifications": false,
	"firebaseProjectId": null,
	"firebaseAppId": null,
	"defaultLoginIDP": null,
	"publicAccess": true,
	"css": null,
	"clientRequestTimeout": 120,
	"limitWidth": false,
	"searchBackgroundType": null,
	"searchBackgroundColor": null,
	"searchBackgroundShade": null,
	"usedBackgroundType": null,
	"usedBackgroundColor": null,
	"usedBackgroundShade": null,
	"searchEnableShadeCalc": null,
	"usedEnableShadeCalc": null,
	"enableTrace": false,
	"ver": "25.03.18.1200",
	"pwa_enable": false,
	"pwa_customImageIos": null,
	"pwa_customImageAndroidOld": null,
	"pwa_customImageAndroidNew": null,
	"pwa_desktopScreenshotWide": null,
	"pwa_desktopScreenshotNarrow": null,
	"pwa_displayMode": null,
	"pwa_themeColor": null,
	"layout_light": null,
	"layout_dark": null,
	"layout_preference": 1,
	"pwa_backgroundColor": null,
	"passwordResetEmail": null,
	"activationCodeEmail": null,
	"noSubmenuHover": false,
	"defaultLanguage": null,
	"package": "1d4986b7-1ec0-ed11-a8e0-000d3ada944e",
	"cat": [
		{
			"id": "c2d7fc50-4603-f011-90c9-7c1e5237a7cf",
			"name": "BusinessCardApps",
			"title": "Business Card Apps",
			"ver": "25.03.17.1541"
		}
	]
}